// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.
//
// Decodes the blocks generated by block_builder.cc.

#include "table/block.h"

#include <algorithm>
#include <cstdint>
#include <vector>

#include "leveldb/comparator.h"
#include "table/format.h"
#include "util/coding.h"
#include "util/logging.h"

namespace leveldb {

inline uint32_t Block::NumRestarts() const {
  assert(size_ >= sizeof(uint32_t));
  return DecodeFixed32(data_ + size_ - sizeof(uint32_t));
}

Block::Block(const BlockContents& contents)
    : data_(contents.data.data()),
      size_(contents.data.size()),
      owned_(contents.heap_allocated) {
  if (size_ < sizeof(uint32_t)) {
    size_ = 0;  // Error marker
  } else {
    size_t max_restarts_allowed = (size_ - sizeof(uint32_t)) / sizeof(uint32_t);
    if (NumRestarts() > max_restarts_allowed) {
      // The size is too small for NumRestarts()
      size_ = 0;
    } else {
      restart_offset_ = size_ - (1 + NumRestarts()) * sizeof(uint32_t);
    }
  }
}

Block::~Block() {
  if (owned_) {
    delete[] data_;
  }
}

// Helper routine: decode the next block entry starting at "p",
// storing the number of shared key bytes, non_shared key bytes,
// and the length of the value in "*shared", "*non_shared", and
// "*value_length", respectively.  Will not dereference past "limit".
//
// If any errors are detected, returns nullptr.  Otherwise, returns a
// pointer to the key delta (just past the three decoded values).
static inline const char* DecodeEntry(const char* p, const char* limit,
                                      uint32_t* shared, uint32_t* non_shared,
                                      uint32_t* value_length) {
  if (limit - p < 3) return nullptr;
  *shared = reinterpret_cast<const uint8_t*>(p)[0];
  *non_shared = reinterpret_cast<const uint8_t*>(p)[1];
  *value_length = reinterpret_cast<const uint8_t*>(p)[2];
  if ((*shared | *non_shared | *value_length) < 128) {
    // Fast path: all three values are encoded in one byte each
    p += 3;
  } else {
    if ((p = GetVarint32Ptr(p, limit, shared)) == nullptr) return nullptr;
    if ((p = GetVarint32Ptr(p, limit, non_shared)) == nullptr) return nullptr;
    if ((p = GetVarint32Ptr(p, limit, value_length)) == nullptr) return nullptr;
  }

  if (static_cast<uint32_t>(limit - p) < (*non_shared + *value_length)) {
    return nullptr;
  }
  return p;
}

class Block::Iter : public Iterator {
 private:
  const Comparator* const comparator_;
  const char* const data_;       // 块得内容
  uint32_t const restarts_;      // Offset of restart array (list of fixed32)restarts_在内存里面的超始偏移位置
  uint32_t const num_restarts_;  // 重启点（restart_）个数

  // current_ is offset in data_ of current entry.  >= restarts_ if !Valid
   // current_指向的是每个key:value pair，也就是每个record的开头
  uint32_t current_;
  uint32_t restart_index_;  // Index of restart block in which current_ falls
  // 当前iterator指向的key, 注意这里的key是完整的，
  // shared_key + non_shared_key一起
  std::string key_;
  // 当前iterator指向的value
  Slice value_;
  Status status_;

  inline int Compare(const Slice& a, const Slice& b) const {
    return comparator_->Compare(a, b);
  }

  // Return the offset in data_ just past the end of the current entry. 返回的是相对于该block头指针（data_）的offset
  inline uint32_t NextEntryOffset() const {
    return (value_.data() + value_.size()) - data_;
  }

  uint32_t GetRestartPoint(uint32_t index) {
    assert(index < num_restarts_);
    return DecodeFixed32(data_ + restarts_ + index * sizeof(uint32_t));
  }

  /**
   * @brief 移动到下一个point，这里指的是block中一个重启点指向的一串记录中的下一个point，该函数使得key_清空，value定位到index指向的数据的offset起始位置
   * @param {uint32_t} index
   * @return {*}
   */
  void SeekToRestartPoint(uint32_t index) {
    // 因为要移动到一个restart index.
    // 所以旧有的key不再有用，清除掉
    key_.clear();
    // 移动restart index
    restart_index_ = index;
    // current_ will be fixed by ParseNextKey();
    // 拿到restart index对应到数据区的offset
    // ParseNextKey() starts at the end of value_, so set value_ accordingly
    // 注意：此时value里面只是引用到了restart point
    // 这个位置的内存，但是value的长度却是设置为0
    uint32_t offset = GetRestartPoint(index);
    value_ = Slice(data_ + offset, 0);
  }

 public:
  Iter(const Comparator* comparator, const char* data, uint32_t restarts,
       uint32_t num_restarts)
      : comparator_(comparator),
        data_(data),
        restarts_(restarts),
        num_restarts_(num_restarts),
        current_(restarts_),
        restart_index_(num_restarts_) {
    assert(num_restarts_ > 0);
  }

  bool Valid() const override { return current_ < restarts_; }
  Status status() const override { return status_; }
  Slice key() const override {
    assert(Valid());
    return key_;
  }
  Slice value() const override {
    assert(Valid());
    return value_;
  }

  void Next() override {
    assert(Valid());
    ParseNextKey();
  }
  
  /**
   * @brief 寻找当前record的前一个record，如果当前record在restart的第一个位置，那么到前一个restart中寻找，否则在该restart中寻找 
   * @return {*}
   */
  void Prev() override {
    assert(Valid());

    // Scan backwards to a restart point before current_
     // 这里拿到当前record的 offset
    const uint32_t original = current_;
    while (GetRestartPoint(restart_index_) >= original) {
      // 如果restart_index_ == 0
      // 本质上相当于SeekToLast();
      // 代码可以改写成
      // if (0 == restart_index_) return SeekToLast();
      if (restart_index_ == 0) {
        // No more entries
        current_ = restarts_;
        restart_index_ = num_restarts_;
        return;
      }
      restart_index_--;
    }
    // 首先定位到该restart的第一个record，然后用do-while循环遍历到第一个大于original的record
    SeekToRestartPoint(restart_index_);
    do {
      // Loop until end of current entry hits the start of original entry
    } while (ParseNextKey() && NextEntryOffset() < original);
  }

  /**
   * @brief 使用二分查找对block进行查找
   * @param {Slice&} target 目标值
   * @return {*}
   */
  // 只会利用每个restart index开头的那个record来进行二分。
  // 每个开头位置的key都是完整的。不需要拼接。可以直接用来比较。
  // 二分找的是restart index
  // 找到restart index之后，移动到这个resart index。然后取出里面的record，直接record.key的值大于等于target
  void Seek(const Slice& target) override {
    // Binary search in restart array to find the last restart point
    // with a key < target
    uint32_t left = 0;
    uint32_t right = num_restarts_ - 1;
    int current_key_compare = 0;

    if (Valid()) {
      // If we're already scanning, use the current position as a starting
      // point. This is beneficial if the key we're seeking to is ahead of the
      // current position.
      current_key_compare = Compare(key_, target);
      if (current_key_compare < 0) {
        // key_ is smaller than target
        left = restart_index_;
      } else if (current_key_compare > 0) {
        right = restart_index_;
      } else {
        // We're seeking to the key we're already at.
        return;
      }
    }
    // 对重启点进行二分查找
    while (left < right) {
      uint32_t mid = (left + right + 1) / 2;
      // GetRestartPoint 查找到mid这个重启点的值
      uint32_t region_offset = GetRestartPoint(mid); //region_offset表示mid这个重启点在块中的偏移量
      uint32_t shared, non_shared, value_length;
      const char* key_ptr =     // key_ptr指向了非共享部分
          DecodeEntry(data_ + region_offset, data_ + restarts_, &shared,  // DecodeEntry在该重启点数据中读取第一组键值对，shared表示键共享部分长度，non_shared表示非共享
                      &non_shared, &value_length);                        // 部分长度，value_length表示值得长度.
      if (key_ptr == nullptr || (shared != 0)) {  // 重启点开始位置得键得共享部分长度肯定为0，否则错误
        CorruptionError();
        return;
      }
      Slice mid_key(key_ptr, non_shared);  // mid_key表示mid这个重启点指向键值对得第一个键，因为shared肯定为0，所以将non_shared长度得部分赋值给mid_key即可
      if (Compare(mid_key, target) < 0) {
        // Key at "mid" is smaller than "target".  Therefore all
        // blocks before "mid" are uninteresting.
        left = mid;
      } else {
        // Key at "mid" is >= "target".  Therefore all blocks at or
        // after "mid" are uninteresting.
        right = mid - 1;
      }
    }

    // We might be able to use our current position within the restart block.
    // This is true if we determined the key we desire is in the current block
    // and is after than the current key.
    assert(current_key_compare == 0 || Valid());
    bool skip_seek = left == restart_index_ && current_key_compare < 0;
    if (!skip_seek) {
      // 通过二分查找，找到了一个重启点（该重启点定位到得数据内容中有可能包含待查找得键），接着在该数据内容中遍历查找
      // 找到第一个大于等于target得键，并将该键的位置放到Iter类中的key_和value_中
      SeekToRestartPoint(left);
    }
    // Linear search (within restart block) for first key >= target
    // 在该循环中从第left个restart中遍历，找到第一个key >= target的
    while (true) {
      if (!ParseNextKey()) {
        return;
      }
      if (Compare(key_, target) >= 0) {
        return;
      }
    }
  }

  void SeekToFirst() override {
    SeekToRestartPoint(0);
    ParseNextKey();
  }
/*
+----------------------------+ <--------+last restart
|                            |
|      Record a              |
|                            |
+----------------------------+
|                            |
|      Record b              |
|                            |
+----------------------------+
|                            |
|      Record c              |
|                            |
+----------------------------+ ***
|                            |
|      Record d              |
|                            |
|                            |
+----------------------------+  <---- restarts_
*/
// 该函数将current_***定位到Record d的位置
  void SeekToLast() override {
    // 首先定位到last restart
    SeekToRestartPoint(num_restarts_ - 1);
    // 然后在最后一个重启点后遍历跳过前边的记录
    while (ParseNextKey() && NextEntryOffset() < restarts_) {
      // Keep skipping
    }
    // 最终，NextEntryOffset()得到的值会是指向record d的尾部
    // 这个时候也就是== restarts_
    // 这个时候跳出循环，那么也就完成了`SeekToLast`这个目标。
  }

 private:
  void CorruptionError() {
    current_ = restarts_;
    restart_index_ = num_restarts_;
    status_ = Status::Corruption("bad entry in block");
    key_.clear();
    value_.clear();
  }

  bool ParseNextKey() {
    current_ = NextEntryOffset();
    // next record 的起始位置
    // 拿到应该解析的内存起始位置。
    const char* p = data_ + current_;
    const char* limit = data_ + restarts_;  // Restarts come right after data
    if (p >= limit) {
      // No more entries to return.  Mark as invalid.
      // 如果超出内存位置
      // 这个内存位置就是用restarts_内存所在位置来限制的
      current_ = restarts_;
      restart_index_ = num_restarts_;
      return false;
    }

    // Decode next entry
    uint32_t shared, non_shared, value_length;
    p = DecodeEntry(p, limit, &shared, &non_shared, &value_length);
    if (p == nullptr || key_.size() < shared) { // 如果key的长度小于共同前缀长度或p为空则说明没有定位到
      CorruptionError();
      return false;
    } else {
      // 注意：这里使用resize，则会在上一个key的
      // 基础上，把non_shared 的部分剪掉
      key_.resize(shared);
      // 然后再追加上non shared的key部分
      key_.append(p, non_shared);
      // 至此，整个key就是完整的，接下来去取完整的value
      value_ = Slice(p + non_shared, value_length);
      while (restart_index_ + 1 < num_restarts_ &&
             GetRestartPoint(restart_index_ + 1) < current_) {
        ++restart_index_;
      }
      return true;
    }
  }
};

Iterator* Block::NewIterator(const Comparator* comparator) {
  if (size_ < sizeof(uint32_t)) {
    return NewErrorIterator(Status::Corruption("bad block contents"));
  }
  const uint32_t num_restarts = NumRestarts();
  if (num_restarts == 0) {
    return NewEmptyIterator();
  } else {
    return new Iter(comparator, data_, restart_offset_, num_restarts);
  }
}

}  // namespace leveldb
